<!DOCTYPE html>
<!-- saved from url=(0062)https://www.murdo.ch/posts/build-a-contact-form-with-rails-4-2 -->
<html lang="en" style="" hv="a0" class=" js flexbox flexboxlegacy canvas canvastext webgl no-touch geolocation postmessage websqldatabase indexeddb hashchange history draganddrop websockets rgba hsla multiplebgs backgroundsize borderimage borderradius boxshadow textshadow opacity cssanimations csscolumns cssgradients cssreflections csstransforms csstransforms3d csstransitions fontface generatedcontent video audio localstorage sessionstorage webworkers applicationcache svg inlinesvg smil svgclippaths"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script src="./Stephen Murdoch, Ruby Developer, Glasgow_files/modernizr-434ed410f04467ac857019cb41d2bfd0.js"></script>

<meta content="IE=edge" http-equiv="X-UA-Compatible">
<meta content="width=device-width, initial-scale=1.0" name="viewport">
<title>Stephen Murdoch, Ruby Developer, Glasgow</title>
<link rel="stylesheet" media="all" href="./Stephen Murdoch, Ruby Developer, Glasgow_files/application-02ebf39db9718832b5ba36eb29a93957.css" data-turbolinks-track="true">
<script src="./Stephen Murdoch, Ruby Developer, Glasgow_files/application-e95dc9607b0480fc3df29b95c675d0d4.js" data-turbolinks-track="true"></script><meta class="foundation-data-attribute-namespace"><meta class="foundation-mq-xxlarge"><meta class="foundation-mq-xlarge"><meta class="foundation-mq-large"><meta class="foundation-mq-medium"><meta class="foundation-mq-small"><style></style>
<meta name="csrf-param" content="authenticity_token">
<meta name="csrf-token" content="29pT6ekQU0AdmwvufTW32argXFTKO3nhOL3tdgHQOTd6qwkzL4Bg/0cYQirr3NpAkCZ1zBhUDSq6b8PFJwSZLg==">
<meta class="foundation-mq-topbar"></head>
<body class="hello">
<div class="row">
<div class="columns medium-8 large-8 medium-centered large-centered">
<header id="site-header">
<p>
<span class="name">
<a href="https://www.murdo.ch/"><em>stephen</em>
<span class="small-caps">
<strong>murdoch</strong>
</span>
</a></span>
<span class="job">
<span class="header-highlight">programmer,</span>
<em>glasgow</em>
</span>
<span class="contact-me">
<a data-reveal-id="modal_window" data-remote="true" href="https://www.murdo.ch/messages/new"><i class="fi-mail"></i>
</a><a href="https://twitter.com/stephenmurdoch"><i class="fi-social-twitter"></i>
</a><a href="https://github.com/murdoch"><i class="fi-social-github"></i>
</a></span>
</p>
</header>

<main role="main"><article class="post show-post">
<header class="post-header">
<time class="post-time" datetime="2015-08-16">
<span class="month">16 Aug 15</span>
</time>
<h1 class="post-title">Build a contact form with Rails 4.2</h1>
<em class="post-tags"><a href="https://www.murdo.ch/tags/ruby">ruby</a>, <a href="https://www.murdo.ch/tags/rails">rails</a>, <a href="https://www.murdo.ch/tags/tutorial">tutorial</a></em>
</header>
<hr>

<p class="lead">In this tutorial we will develop a contact form with Ruby on Rails 4.2.</p>
<h2>What Are We Going To Do?</h2>

<p>The objective is to get a functioning contact form up and running, and we are going to do it in three <strong>loose steps</strong> which are outlined below:</p>

<ul>
<li>create a model, so that we can <strong>validate</strong> submitted messages</li>
<li>create views and a controller, so that we can have a <strong>user interface</strong>
</li>
<li>configure ActionMailer to <strong>send emails</strong> to my private address</li>
</ul>

<p>Building and testing the model will be the most difficult part and will span several sections, but if you can get through that then you will be OK as the rest is quite straight-forward really.</p>

<p>For those who are interested, there is a <a href="https://github.com/murdoch/rails-contact-form-demo">Github repo</a> for what we're about to build.</p>

<h2>Let's Do This People</h2>

<p>First of all we need to get some kind of Rails app on the go:</p>

<pre><code>$ rails new contact_form_demo_app
</code></pre>

<p>Don't forget to <em>cd</em> into it:</p>

<pre><code>$ cd contact_form_demo_app
</code></pre>

<h2>A Table-less Model</h2>

<p>I don't want to save my <em>fan mail</em> to the database, because there won't be enough room for it all, but I'd still like to run validations on the messages people send me. This calls for a <strong>table-less model</strong>, and we can get some way towards creating one by running the following from the command prompt:</p>

<pre><code>$ bin/rails generate model Message --migration=false --skip-fixture
</code></pre>

<p>Next we need to open up the newly created message model, found at <strong>app/models/message.rb</strong>, and change it from this:</p>

<div class="highlight"><pre><span class="k">class</span> <span class="nc">Message</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
<span class="k">end</span>
</pre></div>


<p>To this:</p>

<div class="highlight"><pre><span class="k">class</span> <span class="nc">Message</span>
<span class="k">end</span>
</pre></div>


<p>Ahh, that's better, we have <em>disinherited</em> from ActiveRecord and now have a table-less model, so we're almost ready to start writing some <strong>unit tests</strong>, but before we go any further we should quickly generate a schema file by running the following command:</p>

<pre><code>$ bin/rake db:create db:migrate
</code></pre>

<h2>Testing, Testing, 1-2-3</h2>

<p>The model generator that we ran earlier also created a test file at <strong>test/models/message_test.rb</strong>. What should we test first? Well, I'd certainly like each message to have a <em>name</em>, <em>email</em>, <em>subject</em> and <em>content</em>, so let's start off by ensuring that our model <strong>responds</strong> to those attributes. Make your test file look like this:</p>

<div class="highlight"><pre><span class="nb">require</span> <span class="s1">'test_helper'</span>

<span class="k">class</span> <span class="nc">MessageTest</span> <span class="o">&lt;</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">TestCase</span>
  <span class="nb">test</span> <span class="s1">'responds to name, email, subject and content'</span> <span class="k">do</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="no">Message</span><span class="o">.</span><span class="n">new</span>
    <span class="o">[</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:subject</span><span class="p">,</span> <span class="ss">:content</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="kp">attr</span><span class="o">|</span>
      <span class="n">assert</span> <span class="n">msg</span><span class="o">.</span><span class="n">respond_to?</span> <span class="kp">attr</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>


<p>Our test still fails because we have not defined any <strong>attributes</strong> on the message class yet. We can fix that by adding the following to our model:</p>

<div class="highlight"><pre><span class="k">class</span> <span class="nc">Message</span>
  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:subject</span><span class="p">,</span> <span class="ss">:content</span>
<span class="k">end</span>
</pre></div>


<p>If we <strong>run the test</strong> again, it <em>should</em> pass. Congrats, we're well and truly <strong>rocking out</strong> now. We have a passing test, and we're ready to move on. Let's see what's next.</p>

<h2>Assigning Values</h2>

<p>So far we have successfully verified that our messages know which attributes they're supposed to have, but what will happen if we try to <strong>assign</strong> values to those attributes? Let's write another test to find out:</p>

<div class="highlight"><pre><span class="nb">require</span> <span class="s1">'test_helper'</span>

<span class="k">class</span> <span class="nc">MessageTest</span> <span class="o">&lt;</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">TestCase</span>

  <span class="nb">test</span> <span class="s1">'should accept valid attributes'</span> <span class="k">do</span>
    <span class="n">valid_attrs</span> <span class="o">=</span> <span class="p">{</span>
      <span class="nb">name</span><span class="p">:</span> <span class="s1">'stephen'</span><span class="p">,</span>
      <span class="n">email</span><span class="p">:</span> <span class="s1">'stephen@example.com'</span><span class="p">,</span>
      <span class="n">subject</span><span class="p">:</span> <span class="s1">'hi'</span><span class="p">,</span>
      <span class="n">content</span><span class="p">:</span> <span class="s1">'kthnxbai'</span>
    <span class="p">}</span>

    <span class="n">msg</span> <span class="o">=</span> <span class="no">Message</span><span class="o">.</span><span class="n">new</span> <span class="n">valid_attrs</span>

    <span class="n">assert</span> <span class="n">msg</span><span class="o">.</span><span class="n">valid?</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>


<p>In case it's not clear, we're trying to create a new message object, and <strong>assign values</strong> to each of the four attributes that we defined earlier.</p>

<p>Run the unit tests again, and you'll see the following output:</p>

<pre><code>$ bin/rake test:units

// some output omitted

1) Error:
MessageTest#test_should_accept_valid_attrs:
ArgumentError: wrong number of arguments (1 for 0)
test/models/message_test.rb:19:in `initialize'

// some output omitted
</code></pre>

<p>Ouch looks like we just got <em>punched in the face</em>. So what's going on here, and more importantly, <strong>how do we fix this?</strong></p>

<h2>Emulating ActiveRecord With ActiveModel</h2>

<p>When we <em>removed ActiveRecord</em> from our message class, we lost the ability to instantiate new objects in the following manner:</p>

<div class="highlight"><pre><span class="n">msg</span> <span class="o">=</span> <span class="no">Message</span><span class="o">.</span><span class="n">new</span><span class="p">({</span><span class="n">some_attr</span><span class="p">:</span> <span class="s1">'abc'</span><span class="p">,</span> <span class="n">another_attr</span><span class="p">:</span> <span class="s1">'xyz'</span><span class="p">})</span>
</pre></div>


<p>We could fix this by <strong>copying the initialize method</strong> from ActiveRecord and hacking about with it until everything works the way we want, but we don't need to do that. There's an easier way. You see, ActiveRecord has a <em>little brother</em>, a <em>BFF</em> even, who goes by the name of <strong>ActiveModel</strong>, and who will help us out if we ask him nicely:</p>

<div class="highlight"><pre><span class="k">class</span> <span class="nc">Message</span>
  <span class="kp">include</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Model</span>
  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:subject</span><span class="p">,</span> <span class="ss">:content</span>
<span class="k">end</span>
</pre></div>


<p>With this in place, we can <strong>run our test suit again</strong>, and you'll hopefully find that they're all passing!</p>

<p>The reason this works is because the <strong>ActiveModel::Model</strong> module has an <strong>initialize</strong>  method that's <em>not too dissimilar</em> from the one we lost when we removed ActiveRecord, see for yourself:</p>

<div class="highlight"><pre><span class="k">module</span> <span class="nn">ActiveModel</span>
  <span class="k">module</span> <span class="nn">Model</span>
    <span class="c1"># omitted</span>

    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">params</span><span class="o">=</span><span class="p">{})</span>
      <span class="n">params</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="kp">attr</span><span class="p">,</span> <span class="n">value</span><span class="o">|</span>
        <span class="nb">self</span><span class="o">.</span><span class="n">public_send</span><span class="p">(\</span><span class="s2">"</span><span class="se">\#</span><span class="s2">{attr}=</span><span class="se">\"</span><span class="s2">, value)</span>
<span class="s2">      end if params</span>
<span class="s2">    end</span>

<span class="s2">    # omitted</span>

<span class="s2">  end</span>
<span class="s2">end</span>
</pre></div>


<p>Great, it's important to know how things work, so I encourage you to look deeper into the <a href="https://github.com/rails/rails">Rails source code</a> any time you feel the need. I think we have enough to move on to the next part, there's still plenty to do.</p>

<h2>Don't Send Me No Blank Emails</h2>

<p>I'd say that a blank message should be considered <strong>invalid</strong>, and our test suite should verify that for us. Open up your message test again, and add the following to it:</p>

<div class="highlight"><pre><span class="nb">require</span> <span class="s1">'test_helper'</span>

<span class="k">class</span> <span class="nc">MessageTest</span> <span class="o">&lt;</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">TestCase</span>
  <span class="c1"># previous tests omitted</span>

  <span class="nb">test</span> <span class="s1">'attributes can not be blank'</span> <span class="k">do</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="no">Message</span><span class="o">.</span><span class="n">new</span>
    <span class="n">refute</span> <span class="n">msg</span><span class="o">.</span><span class="n">valid?</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>


<p>That looks good, we start off by creating a new message object without any attributes, and then we <strong>refute</strong> its validity, or in other words, we <em>assert</em> that it is invalid. Our test fails with the following error message:</p>

<pre><code>// output omitted

Failed refutation, no message given
</code></pre>

<p>Can you see what's wrong? We've created a new message without any attributes, but Rails is <em>failing</em> to flag it as invalid. We need a way to convey our <strong>expectations</strong> to Rails.</p>

<h2>Validating Expectations</h2>

<p>The <strong>validates</strong> method comes from the <em>ActiveModel::Model</em> module that we included earlier, and it allows us to verify the state of our message objects. We can use it as follows:</p>

<div class="highlight"><pre><span class="k">class</span> <span class="nc">Message</span>
  <span class="kp">include</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Model</span>
  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:subject</span><span class="p">,</span> <span class="ss">:content</span>
  <span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:subject</span><span class="p">,</span> <span class="ss">:content</span><span class="p">,</span> <span class="n">presence</span><span class="p">:</span> <span class="kp">true</span>
<span class="k">end</span>
</pre></div>


<p>Do you get what's happening here? We've used the <strong>presence validator</strong> to tell Rails that we want each message to have a name, email, subject and content. Our tests should all be passing now.</p>

<pre><code>$ bin/rake test:models

// output omitted

2 runs, 5 assertions, 0 failures, 0 errors, 0 skips
</code></pre>

<p>Great, we've completed the <strong>hardest part</strong> of our task. We've <em>test-driven</em> a table-less message model, and have some basic validations in place. The rest of our objectives will be a breeze now that we have such a <strong>solid foundation</strong>, so let's move on.</p>

<h2>A Controller For Our Messages</h2>

<p>Now is a good time to go ahead and <strong>generate a controller</strong> for our message model. Run the following from the command line:</p>

<pre><code>$ bin/rails generate controller messages new
</code></pre>

<p>This creates a few files and <em>a route</em> for us. Let's open <strong>app/controllers/messages_controller.rb</strong>:</p>

<div class="highlight"><pre><span class="k">class</span> <span class="nc">MessagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">new</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>


<p>Looks good to me, Rails has generated an empty action named <strong>new</strong>, which we will come back to later. For now let's take a peek at the corresponding test file for this controller, found at <strong>test/controllers/messages_controller_test.rb</strong>:</p>

<div class="highlight"><pre><span class="nb">require</span> <span class="s1">'test_helper'</span>

<span class="k">class</span> <span class="nc">MessagesControllerTest</span> <span class="o">&lt;</span> <span class="no">ActionController</span><span class="o">::</span><span class="no">TestCase</span>
  <span class="nb">test</span> <span class="s2">"should get new"</span> <span class="k">do</span>
    <span class="n">get</span> <span class="ss">:new</span>
    <span class="n">assert_response</span> <span class="ss">:success</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>


<p>Once again Rails has done some of the heavy lifting for us by pre-baking a suitable test for us. We can run it with <strong>bin/rake test:controllers</strong> and it will pass. No complaints here. Our controller is beginning to come together and I reckon this is a good time to start work on the view.</p>

<h2>It's Time To Build Our Form</h2>

<p>Rails has already generated an empty view file for us at <strong>app/views/messages/new.html.erb</strong>, so let's add the following code to it:</p>

<div class="highlight"><pre><span class="cp">&lt;%=</span> <span class="n">form_for</span> <span class="vi">@message</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">  </span><span class="cp">&lt;%</span> <span class="k">if</span> <span class="vi">@message</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">any?</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">    &lt;div id="error_explanation"&gt;</span>
<span class="x">      &lt;h2&gt;</span>
<span class="x">        </span><span class="cp">&lt;%=</span> <span class="s2">"</span><span class="si">#{</span><span class="n">pluralize</span><span class="p">(</span><span class="vi">@message</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">count</span><span class="p">,</span> <span class="s2">"error"</span><span class="p">)</span><span class="si">}</span><span class="s2"> prohibited this message from being sent:"</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">      &lt;/h2&gt;</span>

<span class="x">      &lt;ul&gt;</span>
<span class="x">        </span><span class="cp">&lt;%</span> <span class="vi">@message</span><span class="o">.</span><span class="n">errors</span><span class="o">.</span><span class="n">full_messages</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">msg</span><span class="o">|</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">          &lt;li&gt;</span><span class="cp">&lt;%=</span> <span class="n">msg</span> <span class="cp">%&gt;</span><span class="x">&lt;/li&gt;</span>
<span class="x">        </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">      &lt;ul&gt;</span>
<span class="x">    &lt;/div&gt;</span>
<span class="x">  </span><span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>

<span class="x">  &lt;div class="field"&gt;</span>
<span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:name</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">  &lt;/div&gt;</span>

<span class="x">  &lt;div class="field"&gt;</span>
<span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:email</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">email_field</span> <span class="ss">:email</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">  &lt;/div&gt;</span>

<span class="x">  &lt;div class="field"&gt;</span>
<span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:subject</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_field</span> <span class="ss">:subject</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">  &lt;/div&gt;</span>

<span class="x">  &lt;div class="field"&gt;</span>
<span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">label</span> <span class="ss">:content</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">text_area</span> <span class="ss">:content</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">  &lt;/div&gt;</span>

<span class="x">  &lt;div class="actions"&gt;</span>
<span class="x">    </span><span class="cp">&lt;%=</span> <span class="n">f</span><span class="o">.</span><span class="n">submit</span> <span class="s1">'Send'</span><span class="p">,</span> <span class="n">class</span><span class="p">:</span> <span class="s1">'button'</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">  &lt;/div&gt;</span>
<span class="cp">&lt;%</span> <span class="k">end</span> <span class="cp">%&gt;</span><span class="x"></span>
</pre></div>


<p>There's not much going on here, it's a <strong>bog standard form</strong>, and you've probably seen this sort of thing before, but our controller test is now failing with the following error message:</p>

<pre><code>1) Error:
MessagesControllerTest#test_should_get_new:
ActionView::Template::Error: First argument in form cannot contain nil or be empty
</code></pre>

<p>This is happening because our view expects its <em>corresponding controller action</em> to define any instance variables that it uses. Did you notice the <strong>@message</strong> variable in the form we created earlier? Well, right now its value is nil, and the <strong>form_for</strong> helper that we used to build the view is complaining about that. All we need to do in order to fix this is open up our messages controller and define the <strong>@message</strong> variable, like so:</p>

<div class="highlight"><pre><span class="k">class</span> <span class="nc">MessagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="k">def</span> <span class="nf">new</span>
    <span class="vi">@message</span> <span class="o">=</span> <span class="no">Message</span><span class="o">.</span><span class="n">new</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>


<p>When we <strong>run our controller test</strong> again we find that it is <em>still failing</em>, but this time the error message reads as follows:</p>

<pre><code>1) Error:\r\nMessagesControllerTest#test_should_get_new:
ActionView::Template::Error: undefined method `messages_path' for #&lt;#&lt;Class:0x007f3fbca7f898&gt;:0x007f3fbca7c148&gt;
</code></pre>

<p>This is happening because the aforementioned <strong>form_for</strong> helper is going to POST to a route that does not exist yet. The fix is easy. You guessed it, we need to create the missing route. Open up <strong>config/routes.rb</strong> and change the following line:</p>

<div class="highlight"><pre><span class="n">get</span> <span class="s1">'messages/new'</span>
</pre></div>


<p>To this:</p>

<div class="highlight"><pre><span class="n">resources</span> <span class="ss">:messages</span><span class="p">,</span> <span class="n">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:new</span><span class="p">,</span> <span class="ss">:create</span><span class="o">]</span>
</pre></div>


<p>It's a bit of a change, but one that we need. Now <strong>run the test again</strong> and you'll find that it's passing.</p>

<p>That's better. Try visiting <a href="http://localhost:3000/messages/new">http://localhost:3000/messages/new</a> and behold your new contact form. The curious among you will notice an <strong>unknown action</strong> error when you hit the send button, so let's deal with that next.</p>

<h2>Submitting Our Form</h2>

<p>Let's write another test to verify that form submission is handled correctly. Open <strong>test/controllers/messages_controller_test.rb</strong> and add the following:</p>

<div class="highlight"><pre><span class="nb">test</span> <span class="s2">"successful post"</span> <span class="k">do</span>

  <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="n">message</span><span class="p">:</span> <span class="p">{</span>
    <span class="nb">name</span><span class="p">:</span> <span class="s1">'cornholio'</span><span class="p">,</span>
    <span class="n">email</span><span class="p">:</span> <span class="s1">'cornholio@example.com'</span><span class="p">,</span>
    <span class="n">subject</span><span class="p">:</span> <span class="s1">'hi'</span><span class="p">,</span>
    <span class="n">content</span><span class="p">:</span> <span class="s1">'bai'</span>
  <span class="p">}</span>

  <span class="n">assert_redirected_to</span> <span class="n">new_message_path</span>
<span class="k">end</span>
</pre></div>


<p>It's a pretty simple test. We POST a bunch of values, and then we assert that the user is redirected back to the form. <strong>Run the controller tests</strong> again, and observe the following error message:</p>

<pre><code>1) Error:\r\nMessagesControllerTest#test_should_post_create:\r\nAbstractController::ActionNotFound: The action 'create' could not be found for MessagesController
</code></pre>

<p>A RESTful rails controller should have a <strong>create</strong> method for handling form submission. Open up your messages controller and add the following:</p>

<div class="highlight"><pre><span class="k">class</span> <span class="nc">MessagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="c1"># previous method omitted</span>

  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@message</span> <span class="o">=</span> <span class="no">Message</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">message_params</span><span class="p">)</span>

    <span class="k">if</span> <span class="vi">@message</span><span class="o">.</span><span class="n">valid?</span>
      <span class="n">redirect_to</span> <span class="n">new_message_path</span><span class="p">,</span> <span class="n">notice</span><span class="p">:</span> <span class="s2">"Thankyou for your message."</span>
    <span class="k">else</span>
      <span class="n">render</span> <span class="ss">:new</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">message_params</span>
    <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:message</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:subject</span><span class="p">,</span> <span class="ss">:content</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>


<p>I've added a fair bit of code there, let me walk you through it. You should notice two methods, one named <strong>create</strong> and another private one named <strong>message_params</strong>. You should add BOTH of them to your code. The <strong>create</strong> action defines an instance variable named <strong>@message</strong>, whose attributes are <em>protected</em> by the <strong>message_params</strong> private method. Then we redirect the user back to the contact page if their message is valid.</p>

<p>If we <strong>run our controller tests</strong> again, they should be passing, but before we move on, let's just write a quick test to verify that an <em>unsuccessful form submission</em> is handled correctly too:</p>

<div class="highlight"><pre><span class="nb">test</span> <span class="s2">"failed post"</span> <span class="k">do</span>
  <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="n">message</span><span class="p">:</span> <span class="p">{\</span>
    <span class="nb">name</span><span class="p">:</span> <span class="s1">''</span><span class="p">,</span>
    <span class="n">email</span><span class="p">:</span> <span class="s1">''</span><span class="p">,</span>
    <span class="n">subject</span><span class="p">:</span> <span class="s1">''</span><span class="p">,</span>
    <span class="n">content</span><span class="p">:</span> <span class="s1">''</span>
  <span class="p">}</span>

  <span class="o">[</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">:subject</span><span class="p">,</span> <span class="ss">:content</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="kp">attr</span><span class="o">|</span>
    <span class="n">assert_select</span> <span class="s1">'li'</span><span class="p">,</span> <span class="s2">"</span><span class="si">#{</span><span class="kp">attr</span><span class="o">.</span><span class="n">capitalize</span><span class="si">}</span><span class="s2"> can't be blank"</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>


<p><strong>Run the controller tests</strong> and they should all pass thanks to the code we wrote earlier.</p>

<p>Congrats we've achieved quite a lot there. Our view is in place, our controller is quite well tested, and we can move on to the <strong>final stretch</strong> of our journey.</p>

<h2>Sending Emails With ActionMailer</h2>

<p>Now that we have a working controller and view, we need to <strong>email</strong> each <em>valid message</em> to a private address of our choice. Rails provides a generator that will help us get started here:</p>

<div class="highlight"><pre><span class="nv">$ </span>bin/rails generate mailer MessageMailer
</pre></div>


<p>Open up the newly created test file found at <strong>test/mailers/message_mailer_test.rb</strong> and add the following to it:</p>

<div class="highlight"><pre><span class="nb">require</span> <span class="s1">'test_helper'</span>

<span class="k">class</span> <span class="nc">MessageMailerTest</span> <span class="o">&lt;</span> <span class="no">ActionMailer</span><span class="o">::</span><span class="no">TestCase</span>

  <span class="nb">test</span> <span class="s2">"message me"</span> <span class="k">do</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="no">Message</span><span class="o">.</span><span class="n">new</span><span class="p">(</span>
      <span class="nb">name</span><span class="p">:</span> <span class="s1">'cornholio'</span><span class="p">,</span>
      <span class="n">email</span><span class="p">:</span> <span class="s1">'cornholio@example.com'</span><span class="p">,</span>
      <span class="n">subject</span><span class="p">:</span> <span class="s1">'Hi'</span><span class="p">,</span>
      <span class="n">content</span><span class="p">:</span> <span class="s1">'Hello from the internet'</span>
    <span class="p">)</span>

    <span class="n">email</span> <span class="o">=</span> <span class="no">MessageMailer</span><span class="o">.</span><span class="n">message_me</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span><span class="o">.</span><span class="n">deliver_now</span>

    <span class="n">refute</span> <span class="no">ActionMailer</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">deliveries</span><span class="o">.</span><span class="n">empty?</span>

    <span class="n">assert_equal</span> <span class="o">[</span><span class="s1">'stephen@example.com'</span><span class="o">]</span><span class="p">,</span> <span class="n">email</span><span class="o">.</span><span class="n">to</span>
    <span class="n">assert_equal</span> <span class="o">[</span><span class="s1">'cornholio@example.com'</span><span class="o">]</span><span class="p">,</span> <span class="n">email</span><span class="o">.</span><span class="n">from</span>
    <span class="n">assert_equal</span> <span class="s1">'Hi'</span><span class="p">,</span> <span class="n">email</span><span class="o">.</span><span class="n">subject</span>
    <span class="n">assert_equal</span> <span class="s1">'Hello from the internet'</span><span class="p">,</span> <span class="n">email</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">to_s</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>


<p>There's a lot going on here, so allow me to explain. We  create a new message and pass it as an argument to a method named <strong>MessageMailer.message_me</strong>. We call <em>deliver_now</em> on the result. Then we check that <em>ActionMailer::Base.deliveries</em>, an array of <em>recently sent test emails</em>, <strong>is not empty</strong>, and we make some assertions on the last email that was sent.</p>

<p>The <em>test will fail</em> when we <strong>run it</strong>:</p>

<pre><code>$ bin/rake test:mailers

NoMethodError: undefined method `message_me' for MessageMailer:Class
</code></pre>

<p>Ahh, the <strong>message_me</strong> method does not exist yet, so add the following to <strong>app/mailers/message_mailer.rb</strong>:</p>

<div class="highlight"><pre><span class="k">class</span> <span class="nc">MessageMailer</span> <span class="o">&lt;</span> <span class="no">ApplicationMailer</span>

  <span class="c1"># use your own email address here</span>
  <span class="n">default</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s2">"stephen@example.com"</span>
  <span class="k">def</span> <span class="nf">message_me</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
  <span class="k">end</span>

<span class="k">end</span>
</pre></div>


<p><strong>Run the mailer test again</strong>, and this time you should see the following output:</p>

<pre><code>$ bin/rake test:mailers

Failed refutation, no message given
</code></pre>

<p>OK, so our <strong>refutation</strong>, see below, is failing:</p>

<div class="highlight"><pre><span class="n">refute</span> <span class="no">ActionMailer</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">deliveries</span><span class="o">.</span><span class="n">empty?</span>
</pre></div>


<p>This is happening because the <em>ActionMailer::Base.deliveries</em> array is <strong>empty</strong>, and we're trying to refute that fact. To fix this we need to <em>perform a delivery</em> by calling the <strong>mail</strong> method from our <strong>message_me</strong> action like so:</p>

<div class="highlight"><pre><span class="k">class</span> <span class="nc">MessageMailer</span> <span class="o">&lt;</span> <span class="no">ApplicationMailer</span>
  <span class="c1"># use your own email address here</span>
  <span class="n">default</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s2">"stephen@example.com"</span>

  <span class="k">def</span> <span class="nf">message_me</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
    <span class="vi">@msg</span> <span class="o">=</span> <span class="n">msg</span>

    <span class="n">mail</span> <span class="n">from</span><span class="p">:</span> <span class="vi">@msg</span><span class="o">.</span><span class="n">email</span><span class="p">,</span> <span class="n">subject</span><span class="p">:</span> <span class="vi">@msg</span><span class="o">.</span><span class="n">subject</span><span class="p">,</span> <span class="n">body</span><span class="p">:</span> <span class="vi">@msg</span><span class="o">.</span><span class="n">content</span>
  <span class="k">end</span>
<span class="k">end</span>
</pre></div>


<p>Now when we run our mailer test with <strong>bin/rake test:mailers</strong> the <em>ActionMailer::Base.deliveries</em> array will not be empty and our refutation will pass, along with the other assertions that we made.\r\n\r\nCongrats our tests confirm that we have a working mailer, but we still need to tell our messages controller to call the mailer whenever it receives a valid message from one of our visitors. Let's do that next.</p>

<h2>Hooking ActionMailer Into Our Messages Controller</h2>

<p>Open <strong>test/controllers/messages_controller_test.rb</strong>, find the <strong>successful post</strong> test that we created earlier, and change it to look like this:</p>

<div class="highlight"><pre><span class="nb">test</span> <span class="s2">"succesful post"</span> <span class="k">do</span>
  <span class="n">assert_difference</span> <span class="s1">'ActionMailer::Base.deliveries.size'</span><span class="p">,</span> <span class="mi">1</span> <span class="k">do</span>
    <span class="n">post</span> <span class="ss">:create</span><span class="p">,</span> <span class="n">message</span><span class="p">:</span> <span class="p">{</span>
      <span class="nb">name</span><span class="p">:</span> <span class="s1">'cornholio'</span><span class="p">,</span>
      <span class="n">email</span><span class="p">:</span> <span class="s1">'cornholio@example.com'</span><span class="p">,</span>
      <span class="n">subject</span><span class="p">:</span> <span class="s1">'hi'</span><span class="p">,</span>
      <span class="n">content</span><span class="p">:</span> <span class="s1">'bai'</span>
    <span class="p">}</span>
  <span class="k">end</span>

  <span class="n">assert_redirected_to</span> <span class="n">new_message_path</span>
  <span class="n">last_email</span> <span class="o">=</span> <span class="no">ActionMailer</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">deliveries</span><span class="o">.</span><span class="n">last</span>

  <span class="n">assert_equal</span> <span class="s2">"hi"</span><span class="p">,</span> <span class="n">last_email</span><span class="o">.</span><span class="n">subject</span>
  <span class="n">assert_equal</span> <span class="s1">'stephen@example.com'</span><span class="p">,</span> <span class="n">last_email</span><span class="o">.</span><span class="n">to</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
  <span class="n">assert_equal</span> <span class="s1">'cornholio@example.com'</span><span class="p">,</span> <span class="n">last_email</span><span class="o">.</span><span class="n">from</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
  <span class="n">assert_match</span><span class="p">(</span><span class="sr">/bai/</span><span class="p">,</span> <span class="n">last_email</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">to_s</span><span class="p">)</span>

  <span class="no">ActionMailer</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">deliveries</span><span class="o">.</span><span class="n">clear</span>
<span class="k">end</span>
</pre></div>


<p>It looks like at lot of code, but all we've really done here is assert that <em>our friend</em> the <strong>ActionMailer::Base.deliveries</strong> array increases in size whenever a user posts a valid message. We've also tacked on a few assertions about the last email sent. Finally, we have cleared the <em>ActionMailer::Base.deliveries</em> array which is a best practice in controller tests, and something that happens automatically in mailer tests.</p>

<p>This test fails when we run <strong>bin/rake test:controllers</strong> because our messages controller has not yet been instructed to perform deliveries. We can make it do that by opening <strong>app/controllers/messages_controller.rb</strong> and making the <strong>create</strong> method look like this:</p>

<div class="highlight"><pre><span class="k">class</span> <span class="nc">MessagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
  <span class="c1"># previous method omitted</span>

  <span class="k">def</span> <span class="nf">create</span>
    <span class="vi">@message</span> <span class="o">=</span> <span class="no">Message</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">message_params</span><span class="p">)</span>

    <span class="k">if</span> <span class="vi">@message</span><span class="o">.</span><span class="n">valid?</span>
      <span class="no">MessageMailer</span><span class="o">.</span><span class="n">message_me</span><span class="p">(</span><span class="vi">@message</span><span class="p">)</span><span class="o">.</span><span class="n">deliver_now</span>
      <span class="n">redirect_to</span> <span class="n">new_message_path</span><span class="p">,</span> <span class="n">notice</span><span class="p">:</span> <span class="s2">"Thankyou for your message."</span>
    <span class="k">else</span>
      <span class="n">render</span> <span class="ss">:new</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="c1"># private method omitted</span>
<span class="k">end</span>
</pre></div>


<p>See what we did there? We just added one line of code to our <strong>create</strong> method, it's the same line we added to <strong>test/mailers/message_mailer_test.rb</strong> earlier. With this in place our controller test will pass when we run it.</p>

<h2>Is This The End?</h2>

<p>Yes, we're finished. But you can always make improvements, in fact I encourage you to. What more can you do? Well, here are some suggestions, things I will be doing with my own contct page:</p>

<ul>
<li>move email delivery into a background job, my next post will likely focus on that</li>
<li>AJAX, one of my future posts <strong>might</strong> focus on that, we'll see</li>
<li>create mailer views and templates, for prettier emails</li>
</ul>

<p>For those who are interested, there is a <a href="https://github.com/murdoch/rails-contact-form-demo">Github repo</a> for what we've just built.</p>

<h2>Addendum</h2>

<p>You might be wondering why I haven't shown you how to configure your <em>production settings</em>, and that's a good question. The reason has to do with the fact that your server environment is likely to differ from mine. I'm on Heroku and Gmail, but you might be on Digital Ocean and Sendmail. I would very much like to spend some time going over production specific configurations in a future post. If you have any questions, just ask, I will try to help in the meantime.</p>

<p>Finally, it took me a week to write this post, so I can almost guarantee that there are bugs in it. If you find any mistakes, typos, or outright lies, then please let me know through the comments section below and I will fix them. Thanks for reading, I hope this helps you.</p>

</article>


</main>
<footer id="site-footer">
<hr>
<p>
Stephen Murdoch
<strong>
©
2016
</strong>
<span class="contact-me">
<a data-reveal-id="modal_window" data-remote="true" href="https://www.murdo.ch/messages/new"><i class="fi-mail"></i>
</a><a href="https://twitter.com/stephenmurdoch"><i class="fi-social-twitter"></i>
</a></span>
</p>
</footer>
<div class="reveal-modal small" data-reveal="" id="modal_window">
<div class="modal-inside"></div>
<a class="close-reveal-modal">×</a>
</div>

</div>
</div>


<span id="buffer-extension-hover-button" style="display: none;position: absolute;z-index: 8675309;width: 100px;height: 25px;background-image: url(chrome-extension://noojglkidnpfjbincgijbaiedldjfbhh/data/shared/img/buffer-hover-icon@2x.png);background-size: 100px 25px;opacity: 0.9;cursor: pointer;"></span></body></html>